{"pages":[],"posts":[{"title":"sql语句中参数的传递","text":"&emsp;&emsp;通过Mybatis的使用，开发人员只需要专心提供SQL语句即可，这篇文章介绍了SQL语句中参数传递的问题。大致有以下几种方式： 1. 单个参数传递123//在接口中定义放法，参数形式如下//使用单个参数Student selectById(int id); 123456789&lt;!-- 使用单个参数查询： parameterType：表示参数数据类型（可不写） 使用 #{参数名} 获取参数的值 对参数名称无要求--&gt;&lt;select id=\"selectById\" parameterType=\"int\" resultType=\"cn.krain.domain.Student\"&gt; select * from student where id = #{id}&lt;/select&gt; 12//调用方法时只需要传入相应类型的单个值即可Student student = dao.selectById(2); 2. 使用@param为参数命名传递多个参数12345/* 在接口文件的对应方法形参中，使用以下格式进行命名* 多个参数：为参数命名，在形参前加上 @Param(\"自定义参数名\")* */List&lt;Student&gt; selectMultiParam(@Param(\"myname\") String name, @Param(\"myage\") Integer age); 12//调用时传入对应的参数值List&lt;Student&gt; students = dao.selectMultiParam(\"康康\",23); 123456&lt;!-- 多个参数：使用param命名 使用为参数起得名称 eg：#{命名}--&gt;&lt;select id=\"selectMultiParam\" resultType=\"cn.krain.domain.Student\"&gt; select * from student where name=#{myname} or age=#{myage}&lt;/select&gt; 3. 使用Java对象作为方法的参数123//在接口中定义放法，参数形式如下//多个参数：使用java对象作为方法的参数List&lt;Student&gt; selectMultiObject(QueryParam queryParam); 12345678910&lt;!-- 多个参数：使用java对象的属性值作为参数实际值 原始语法：#{属性名, javaType=java中类型名称, jdbcType=数据库中的类型名} eg: #{queryName, javaType=String, jdbcType=Varchar} #{queryAge, javaType=Integer, jdbcType=Integer} 简写：#{属性名}--&gt;&lt;select id=\"selectMultiObject\" resultType=\"cn.krain.domain.Student\"&gt; select * from student where name=#{queryName} or age=#{queryAge}&lt;/select&gt; 12//调用时传入相应对象List&lt;Student&gt; students = dao.selectMultiObject(queryParam); 4. 使用位置传参&emsp;&emsp;在方法的参数中，形参的顺序对应映射文件中参数的顺序，arg0指形参中第一个值，arg1代表第二个，以此类推。 123//在接口中定义放法，参数形式如下//多个参数：使用位置传参List&lt;Student&gt; selectMultiPosition(String name, Integer age); 1234&lt;!--根据参数位置传参 arg后面的数字代表参数所在的位置--&gt;&lt;select id=\"selectMultiPosition\" resultType=\"cn.krain.domain.Student\"&gt; select * from student where name=#{arg0} or age=#{arg1}&lt;/select&gt; 12//调用代码List&lt;Student&gt; students = dao.selectMultiPosition(\"康康\", 23); 5. 使用map传参123//在接口中定义放法，参数形式如下//使用Map传递多个参数List&lt;Student&gt; selectMultiMap(Map&lt;String, Object&gt; map); 1234&lt;!--使用Map键值对传参，形式：#{key名}--&gt;&lt;select id=\"selectMultiMap\" resultType=\"cn.krain.domain.Student\"&gt; select * from student where name=#{mapName} or age=#{mapAge}&lt;/select&gt; 12345//调用Map&lt;String,Object&gt; data = new HashMap&lt;String,Object&gt;();data.put(\"mapName\",\"krain\");data.put(\"mapAge\",23);List&lt;Student&gt; students = dao.selectMultiMap(data);","link":"/2020/07/17/sql%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/16/hello-world/"}],"tags":[],"categories":[]}